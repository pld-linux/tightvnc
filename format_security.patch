--- vnc_unixsrc/vncviewer/sockets.c.orig	2015-02-11 17:15:14.717149236 +0100
+++ vnc_unixsrc/vncviewer/sockets.c	2015-02-11 17:20:41.402046099 +0100
@@ -102,7 +102,7 @@
 	    ProcessXtEvents();
 	    i = 0;
 	  } else {
-	    fprintf(stderr,programName);
+	    fputs(programName, stderr);
 	    perror(": read");
 	    return False;
 	  }
@@ -131,7 +131,7 @@
 	    ProcessXtEvents();
 	    i = 0;
 	  } else {
-	    fprintf(stderr,programName);
+	    fputs(programName, stderr);
 	    perror(": read");
 	    return False;
 	  }
@@ -171,13 +171,13 @@
 	  FD_SET(rfbsock,&fds);
 
 	  if (select(rfbsock+1, NULL, &fds, NULL, NULL) <= 0) {
-	    fprintf(stderr,programName);
+	    fputs(programName, stderr);
 	    perror(": select");
 	    return False;
 	  }
 	  j = 0;
 	} else {
-	  fprintf(stderr,programName);
+	  fputs(programName, stderr);
 	  perror(": write");
 	  return False;
 	}
@@ -209,13 +209,13 @@
 
   sock = socket(AF_INET, SOCK_STREAM, 0);
   if (sock < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": ConnectToTcpAddr: socket");
     return -1;
   }
 
   if (connect(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": ConnectToTcpAddr: connect");
     close(sock);
     return -1;
@@ -223,7 +223,7 @@
 
   if (setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,
 		 (char *)&one, sizeof(one)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": ConnectToTcpAddr: setsockopt");
     close(sock);
     return -1;
@@ -250,7 +250,7 @@
 
   sock = socket(AF_INET, SOCK_STREAM, 0);
   if (sock < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": FindFreeTcpPort: socket");
     return 0;
   }
@@ -285,28 +285,28 @@
 
   sock = socket(AF_INET, SOCK_STREAM, 0);
   if (sock < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": ListenAtTcpPort: socket");
     return -1;
   }
 
   if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,
 		 (const char *)&one, sizeof(one)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": ListenAtTcpPort: setsockopt");
     close(sock);
     return -1;
   }
 
   if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": ListenAtTcpPort: bind");
     close(sock);
     return -1;
   }
 
   if (listen(sock, 5) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": ListenAtTcpPort: listen");
     close(sock);
     return -1;
@@ -330,14 +330,14 @@
 
   sock = accept(listenSock, (struct sockaddr *) &addr, &addrlen);
   if (sock < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": AcceptTcpConnection: accept");
     return -1;
   }
 
   if (setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,
 		 (char *)&one, sizeof(one)) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": AcceptTcpConnection: setsockopt");
     close(sock);
     return -1;
@@ -355,7 +355,7 @@
 SetNonBlocking(int sock)
 {
   if (fcntl(sock, F_SETFL, O_NONBLOCK) < 0) {
-    fprintf(stderr,programName);
+    fputs(programName, stderr);
     perror(": AcceptTcpConnection: fcntl");
     return False;
   }
@@ -422,18 +422,18 @@
 
   str[16] = 0;
 
-  fprintf(stderr,"ReadExact: ");
+  fputs("ReadExact: ", stderr);
 
   for (i = 0; i < len; i++)
     {
       if ((i % 16 == 0) && (i != 0)) {
-	fprintf(stderr,"           ");
+	fputs("           ", stderr);
       }
       c = buf[i];
       str[i % 16] = (((c > 31) && (c < 127)) ? c : '.');
       fprintf(stderr,"%02x ",(unsigned char)c);
       if ((i % 4) == 3)
-	fprintf(stderr," ");
+	fputs(" ", stderr);
       if ((i % 16) == 15)
 	{
 	  fprintf(stderr,"%s\n",str);
@@ -443,8 +443,8 @@
     {
       for (j = i % 16; j < 16; j++)
 	{
-	  fprintf(stderr,"   ");
-	  if ((j % 4) == 3) fprintf(stderr," ");
+	  fputs("   ", stderr);
+	  if ((j % 4) == 3) fputs(" ", stderr);
 	}
       str[i % 16] = 0;
       fprintf(stderr,"%s\n",str);
--- vnc_unixsrc/Xvnc/lib/xtrans/Xtransint.h.orig	2015-02-11 17:34:49.860782937 +0100
+++ vnc_unixsrc/Xvnc/lib/xtrans/Xtransint.h	2015-02-11 17:36:57.193426450 +0100
@@ -479,7 +479,7 @@
 			int hack= 0, saveerrno=errno; \
                         struct timeval tp;\
                         gettimeofday(&tp,0); \
-			fprintf(stderr, __xtransname); fflush(stderr); \
+			fputs(__xtransname, stderr); fflush(stderr); \
 			fprintf(stderr, x+hack,a,b,c); fflush(stderr); \
                         fprintf(stderr, "timestamp (ms): %d\n",tp.tv_sec*1000+tp.tv_usec/1000); \
                         fflush(stderr); \
@@ -498,7 +498,7 @@
 #else
 #define PRMSG(lvl,x,a,b,c)	if (lvl <= XTRANSDEBUG){ \
 			int hack= 0, saveerrno=errno; \
-			fprintf(stderr, __xtransname); fflush(stderr); \
+			fputs(__xtransname, stderr); fflush(stderr); \
 			fprintf(stderr, x+hack,a,b,c); fflush(stderr); \
 			errno=saveerrno; \
 			} else ((void)0)
--- vnc_unixsrc/Xvnc/programs/Xserver/hw/vnc/init.c.orig	2015-02-11 17:48:52.206219560 +0100
+++ vnc_unixsrc/Xvnc/programs/Xserver/hw/vnc/init.c	2015-02-11 17:49:17.019418469 +0100
@@ -943,7 +943,7 @@ void rfbLog(char *format, ...)
 
     time(&clock);
     strftime(buf, 255, "%d/%m/%y %T ", localtime(&clock));
-    fprintf(stderr, buf);
+    fputs(buf, stderr);
 
     vfprintf(stderr, format, args);
     fflush(stderr);
